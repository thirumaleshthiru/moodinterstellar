-- Users table
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    profile_pic LONGBLOB,
    role ENUM('user', 'admin') NOT NULL DEFAULT 'user',
    pending_verification BOOLEAN DEFAULT FALSE,
    milestone INT DEFAULT 30,
    current_position INT DEFAULT 0,
    mental_score_percentage INT DEFAULT 0,
    is_reset BOOLEAN DEFAULT FALSE,
    followers INT DEFAULT 0,
    following INT DEFAULT 0,     
    total_likes INT DEFAULT 0,
    last_task_date DATE DEFAULT NULL,
    profession ENUM('student','employee') NOT NULL,
    is_survey_completed BOOLEAN DEFAULT FALSE
);

-- Tasks table
CREATE TABLE tasks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    task_name VARCHAR(255) NOT NULL,
    task_description TEXT NOT NULL,
    task_output TEXT NOT NULL,
    task_recommendation_start INT NOT NULL,
    task_recommendation_end INT NOT NULL,
    people_who_completed INT DEFAULT 0
);

-- Categories table
CREATE TABLE categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(255) NOT NULL
);

-- Tags table
CREATE TABLE tags (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tag_name VARCHAR(255) NOT NULL
);

-- Stories table
CREATE TABLE stories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    story_title VARCHAR(255) NOT NULL,
    story_content TEXT NOT NULL,
    story_cover_image LONGBLOB,
    story_category INT NOT NULL,
    likes INT DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (story_category) REFERENCES categories(id) ON DELETE CASCADE
);

-- Story Tags junction table
CREATE TABLE story_tags (
    story_id INT NOT NULL,
    tag_id INT NOT NULL,
    PRIMARY KEY (story_id, tag_id),
    FOREIGN KEY (story_id) REFERENCES stories(id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE
);

-- Beginning Questions table
CREATE TABLE beginning_questions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    question TEXT NOT NULL
);

-- Beginning Question Options table
CREATE TABLE beginning_question_options (
    id INT AUTO_INCREMENT PRIMARY KEY,
    question_id INT NOT NULL,
    option TEXT NOT NULL,
    preference DECIMAL(3,2) NOT NULL,
    FOREIGN KEY (question_id) REFERENCES beginning_questions(id) ON DELETE CASCADE
);

-- Journey Questions table
CREATE TABLE journey_questions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    question TEXT NOT NULL
);

-- Journey Question Options table
CREATE TABLE journey_question_options (
    id INT AUTO_INCREMENT PRIMARY KEY,
    question_id INT NOT NULL,
    option TEXT NOT NULL,
    preference DECIMAL(3,2) NOT NULL,
    FOREIGN KEY (question_id) REFERENCES journey_questions(id) ON DELETE CASCADE
);

-- Followers table
CREATE TABLE followers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    follower_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (follower_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Following table
CREATE TABLE following (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    following_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (following_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Likes table
CREATE TABLE likes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    story_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (story_id) REFERENCES stories(id) ON DELETE CASCADE
);

-- Delete Reasons table
CREATE TABLE delete_reasons (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    reason TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- User Performance Statistics table
CREATE TABLE user_performance_statistics (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    date DATE NOT NULL,
    tasks_completed INT DEFAULT 0,
    mental_score INT DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Keywords table
CREATE TABLE keywords (
    id INT AUTO_INCREMENT PRIMARY KEY,
    recommend_percent_start INT NOT NULL,
    recommend_percent_end INT NOT NULL,
    keyword VARCHAR(60) NOT NULL
);
